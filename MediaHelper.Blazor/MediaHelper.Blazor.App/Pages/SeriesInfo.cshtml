@page "/series/{SeriesId}"
@using MediaHelper.Blazor.App.Services
@using MediaHelper.Model
@using Series = SonarrSharp.Models.Series
@using Episode = SonarrSharp.Models.Episode
@inject ApiClient Client

<div class="container">

    @if (Episodes == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <img class="bg" src=@($"http://localhost:8989{CurrentSeries.Images[0].Url}") alt="">

                                
        <div class="row">
            <div class="col s12">
                <div class="card blue-grey darken-1">
                    <div class="card-content white-text">
                        <span class="card-title">@CurrentSeries.Title</span>
                        <img class="left" height="200px" src="@($"http://localhost:8989{CurrentSeries.Images[2].Url}")"/>
                        <p>@(CurrentSeries.Overview ?? "No overview")</p>
                        <h4>Up next: @ContinueWatchingEpisodeTitle</h4>
                        <p>@(ContinueWatching.Episode.Overview ?? "No overview")</p>
                    </div>
                    <div class="card-action">
                        <button class="btn" onclick="@(() => OpenFile())">Play</button>
                        <a class="right" target="_blank" href="http://localhost:8989/series/@CurrentSeries.TitleSlug">Go to Sonarr</a>
                    </div>
                </div>
            </div>
        </div>

        <ul class="collapsible popout">
            @{
                var order = Episodes.GroupBy(episode => episode.SeasonNumber).ToList();
                for (int i = order.Count() - 1; i >= 0; i--)
                {
                    var season = order[i];
                    <li class=@(i == order.Count - 1 ? "active" : null)>
                        <div class="collapsible-header">Season: @season.Key</div>
                        <div class="collapsible-body">
                            <table class="series-table">
                                <thead>
                                <tr>
                                    <th>#</th>
                                    <th></th>
                                    <th>Name</th>
                                    <th>Airdate</th>
                                    <th>Download date</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var episode in season.OrderByDescending(episode => episode.EpisodeNumber))
                                {
                                    <tr>
                                        <td class="episode-nr-cell">@episode.EpisodeNumber</td>
                                        <td class="episode-nr-cell">

                                            @if (episode.HasFile)
                                            {
                                                <i class="far fa-play-circle link-active" onclick="@(() => OpenFile(episode.EpisodeFileId))"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-play-circle link-disable"></i>
                                            }
                                        </td>
                                        <td class="episode-title-cell">
                                            <a href="javascript:void(0)">@episode.Title</a>
                                        </td>
                                        <td class="episode-airdate-cell">@episode.AirDateUtc.LocalDateTime.ToString("HH:mm:ss")</td>
                                        <td class="episode--cell">TODO</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </li>
                }
            }

        </ul>
    }

</div>

@functions
{

    [Parameter]
    public string SeriesId { get; set; }

    public Series CurrentSeries { get; set; }


    private Episode[] Episodes { get; set; }
    private ContinueWatchingResponse ContinueWatching { get; set; }
    private string ContinueWatchingString { get; set; }
    private string ContinueWatchingEpisodeTitle { get; set; }


    protected override async Task OnInitAsync()
    {
        var seriesId = int.Parse(SeriesId);
        Episodes = await Client.Episode.GetSeasons(seriesId);
        CurrentSeries = await Client.Series.GetById(seriesId);
        ContinueWatching = await Client.Episode.GetContinueWatching(seriesId);

        switch (ContinueWatching.Status)
        {
            case ContinueWatchingStatus.InProgress:
                ContinueWatchingString = "Continue watching";
                break;
            case ContinueWatchingStatus.NextEpisode:
                ContinueWatchingString = "Next episode";
                break;
            case ContinueWatchingStatus.NewSeries:
                ContinueWatchingString = "Start to watch";
                break;
            case ContinueWatchingStatus.NoNewEpisodes:
                ContinueWatchingString = "There are no new episodes.";
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        if (ContinueWatching.Episode != null)
            ContinueWatchingEpisodeTitle += $"Season {ContinueWatching.Episode.SeasonNumber}, Episode {ContinueWatching.Episode.EpisodeNumber}, {ContinueWatching.Episode.Title}";


        StateHasChanged();
        await JSRuntime.Current.InvokeAsync<object>("addTooltip");
    }

    private async Task OpenFile()
    {
        await Client.System.OpenFile((int) ContinueWatching.Episode.EpisodeFileId, ContinueWatching.WhereToStart);
    }

    private async Task OpenFile(long episodeFileId)
    {
        await Client.System.OpenFile((int) episodeFileId, TimeSpan.Zero);
    }

}